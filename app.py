import streamlit as st
import torch
from transformers import CamembertTokenizer, CamembertForSequenceClassification
import json
import os
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Configuration de l'interface
st.set_page_config(page_title="Analyse de Sentiments", page_icon="üòä", layout="wide")
st.title("Analyse de Sentiments avec CamemBERT")

# Ajouter des informations sur le mod√®le
st.markdown("""
## √Ä propos de cette application
Cette application utilise un mod√®le CamemBERT, sp√©cialis√© pour la langue fran√ßaise, pour analyser le sentiment d'un texte.
Le mod√®le a √©t√© entra√Æn√© sur des donn√©es augment√©es pour am√©liorer sa pr√©cision sur des phrases courtes.
""")

# Exemples de phrases
example_phrases = {
    "Positif": [
        "Je t'aime de tout mon c≈ìur",
        "C'est une excellente nouvelle",
        "Ce film √©tait vraiment incroyable",
        "Merci pour ton aide pr√©cieuse"
    ],
    "Neutre": [
        "Je vais au cin√©ma ce soir",
        "Le train part √† 15h",
        "J'habite √† Paris depuis 5 ans",
        "Le livre contient 300 pages"
    ],
    "N√©gatif": [
        "Je d√©teste cette situation",
        "Ce produit est de tr√®s mauvaise qualit√©",
        "Je suis tr√®s d√©√ßu par ce service",
        "C'√©tait une journ√©e horrible"
    ]
}

# Charger le mod√®le et le tokenizer
@st.cache_resource
def load_model():
    try:
        model = CamembertForSequenceClassification.from_pretrained('./sentiment_model_final')
        tokenizer = CamembertTokenizer.from_pretrained('./sentiment_model_final')
        return model, tokenizer
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le: {str(e)}")
        return None, None

# Charger les m√©triques
@st.cache_data
def load_metrics():
    try:
        with open('training_metrics.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "train_metrics": {"eval_accuracy": 0, "eval_f1": 0},
            "val_metrics": {"eval_accuracy": 0, "eval_f1": 0}
        }

# Interface principale
model, tokenizer = load_model()
metrics = load_metrics()

if model is not None and tokenizer is not None:
    # Cr√©ation de deux colonnes pour l'interface
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Interface principale
        st.header("Analyse de sentiment")
        
        # Exemples pr√©-d√©finis
        st.subheader("Exemples de phrases")
        example_type = st.selectbox("Choisir une cat√©gorie:", ["Positif", "Neutre", "N√©gatif"])
        selected_example = st.selectbox("S√©lectionner un exemple:", example_phrases[example_type])
        
        # Initialiser la session state pour stocker le texte
        if 'text_input' not in st.session_state:
            st.session_state.text_input = ""
        
        # Zone de texte pour l'entr√©e utilisateur
        user_input = st.text_area("Entrez votre texte en fran√ßais (ou utilisez un exemple):", 
                                value=st.session_state.text_input,
                                height=100)
        
        # Bouton pour utiliser l'exemple
        if st.button("Utiliser cet exemple"):
            st.session_state.text_input = selected_example
            st.experimental_rerun()
        
        if st.button("Analyser"):
            if user_input:
                try:
                    # Pr√©traiter le texte
                    inputs = tokenizer(user_input, return_tensors="pt", truncation=True, padding=True)
                    
                    # Faire la pr√©diction
                    with torch.no_grad():
                        outputs = model(**inputs)
                        predictions = torch.nn.functional.softmax(outputs.logits, dim=-1)
                        sentiment_idx = predictions.argmax().item()
                        
                    # Afficher les r√©sultats
                    sentiment_map = {0: "N√©gatif", 1: "Neutre", 2: "Positif"}
                    confidence = predictions[0][sentiment_idx].item()
                    
                    # Couleurs pour les r√©sultats
                    sentiment_colors = {
                        "Positif": "green",
                        "Neutre": "blue",
                        "N√©gatif": "red"
                    }
                    sentiment_result = sentiment_map[sentiment_idx]
                    
                    st.subheader("R√©sultats")
                    st.markdown(f"<h3 style='color: {sentiment_colors[sentiment_result]}'>Sentiment: {sentiment_result}</h3>", unsafe_allow_html=True)
                    st.write(f"Confiance: {confidence:.2%}")
                    
                    # Afficher les probabilit√©s pour chaque classe
                    st.subheader("Probabilit√©s par classe")
                    
                    # Cr√©er un graphique de barres pour les probabilit√©s
                    fig, ax = plt.subplots(figsize=(10, 6))
                    sentiments = ["N√©gatif", "Neutre", "Positif"]
                    colors = ["red", "blue", "green"]
                    probs = [float(predictions[0][i]) for i in range(3)]
                    
                    bars = ax.bar(sentiments, probs, color=colors)
                    ax.set_ylabel('Probabilit√©')
                    ax.set_title('Probabilit√©s par classe de sentiment')
                    
                    # Ajouter les valeurs au-dessus des barres
                    for bar in bars:
                        height = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                                f'{height:.2%}', ha='center', va='bottom')
                    
                    st.pyplot(fig)
                    
                    # Explication des r√©sultats
                    st.subheader("Interpr√©tation")
                    if max(probs) < 0.96:  # Chang√© de 0.5 √† 0.96 pour correspondre √† votre demande
                        st.warning("‚ö†Ô∏è La confiance est insuffisante. Le mod√®le n'est pas assez certain de ce r√©sultat.")
                        st.markdown("""
                        **Pourquoi le mod√®le manque-t-il de confiance?**
                        - Texte trop court ou ambigu
                        - Contenu dans un registre de langue non reconnu
                        - Expressions idiomatiques ou sarcastiques difficiles √† interpr√©ter
                        - Le mod√®le n√©cessite un r√©entra√Ænement avec plus de donn√©es
                        """)
                    else:
                        st.success(f"‚úÖ Le mod√®le a identifi√© un sentiment {sentiment_result.lower()} avec une excellente confiance.")
                    
                except Exception as e:
                    st.error(f"Erreur lors de l'analyse : {str(e)}")
                    st.info("Veuillez r√©essayer avec un texte plus court ou diff√©rent.")
            else:
                st.warning("Veuillez entrer un texte √† analyser.")
    
    with col2:
        # Afficher les m√©triques si elles existent
        if any(metrics["train_metrics"].values()) or any(metrics["val_metrics"].values()):
            st.sidebar.header("M√©triques du mod√®le")
            st.sidebar.subheader("M√©triques d'entra√Ænement")
            st.sidebar.write(f"Accuracy: {metrics['train_metrics']['eval_accuracy']:.2%}")
            st.sidebar.write(f"F1 Score: {metrics['train_metrics']['eval_f1']:.2%}")
            
            st.sidebar.subheader("M√©triques de validation")
            st.sidebar.write(f"Accuracy: {metrics['val_metrics']['eval_accuracy']:.2%}")
            st.sidebar.write(f"F1 Score: {metrics['val_metrics']['eval_f1']:.2%}")
            
            # Ajouter des conseils pour l'analyse
            st.sidebar.header("Conseils d'utilisation")
            st.sidebar.markdown("""
            Pour de meilleurs r√©sultats:
            - Utilisez des phrases compl√®tes
            - √âvitez le sarcasme ou l'ironie
            - Plus le texte est clair, meilleure sera l'analyse
            """)
else:
    st.error("Le mod√®le n'a pas pu √™tre charg√©. Veuillez v√©rifier que le mod√®le est bien entra√Æn√© et que les fichiers n√©cessaires sont pr√©sents.") 